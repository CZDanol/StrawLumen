#include "dbmigration.h"
#include "db.h"
#include "util/macroutils.h"

#define DB_MIGRATION_PROCEDURE(fromVersion, toVersion) void migrateDbFrom_v ## fromVersion()

void createDb()
{
	// #: SONGS_TABLE_FIELDS
	// Columns are set to NOT NULL so it throws errors when someone forgets to set a column value

	// SONGS
	{
		/*
		 * Where to update when adding columns:
		 * exportdb
		 * opensongimportdialog
		 * lumenexportdialog
		 * lumenimportdialog
		 * */
		db->exec("CREATE TABLE songs ("
				 "id INTEGER PRIMARY KEY,"
				 "uid TEXT NOT NULL,"
				 "name TEXT NOT NULL,"
				 "author TEXT NOT NULL,"
				 "copyright TEXT NOT NULL,"
				 "content TEXT NOT NULL,"
				 "notes TEXT NOT NULL,"
				 "slideOrder TEXT NOT NULL,"
				 "lastEdit INTEGER NOT NULL"
				 ")");

		db->exec("CREATE INDEX i_songs_uid ON songs (uid)");
		db->exec("CREATE INDEX i_songs_name ON songs (name)");
		db->exec("CREATE INDEX i_songs_author_name ON songs (author, name)");
	}

	// SONGS_FULLTEXT
	{
		db->exec("CREATE VIRTUAL TABLE songs_fulltext USING fts4 ("
				 "name TEXT NOT NULL,"
				 "author TEXT NOT NULL,"
				 "content TEXT NOT NULL"
				 ")");
	}

	// SONG_TAGS
	{
		db->exec("CREATE TABLE song_tags ("
				 "song INTEGER NOT NULL,"
				 "tag TEXT NOT NULL,"
				 "PRIMARY KEY(song, tag)"
				 ")");

		db->exec("CREATE INDEX i_song_tags_song ON song_tags (song, tag)");
		db->exec("CREATE INDEX i_song_tags_tag ON song_tags (tag)");
	}

	// STYLES
	{
		db->exec("CREATE TABLE styles ("
				 "id INTEGER PRIMARY KEY,"
				 "name STRING NOT NULL,"
				 "isInternal bool NOT NULL,"
				 "data BLOB"
				 ")");

		db->exec("CREATE INDEX i_styles_name ON styles (name)");

		db->exec("INSERT INTO styles (name, isInternal, data)"
						 "VALUES "
						 "('Tahoma Dark
						 "('Tahoma Light
						 "('Tahoma Simple
						 );
	}

	// KEYVALUE ASSOC
	{
		db->exec("CREATE TABLE keyValueAssoc ("
				 "key STRING NOT NULL,"
				 "value"
				 ")");

		db->exec("CREATE UNIQUE INDEX i_keyValueAssoc_key ON keyValueAssoc(key)");

		db->exec("INSERT INTO keyValueAssoc(key, value)"
						 "VALUES"
						 "('database.version', " STRINGIFY(CURRENT_DB_VERSION) ")");
	}

	// PLAYLISTS
	{
		db->exec("CREATE TABLE playlists ("
				 "id INTEGER PRIMARY KEY,"
				 "name STRING NOT NULL,"
				 "data BLOB,"
				 "lastTouch INTEGER NOT NULL"
					")");

		db->exec("CREATE INDEX i_playlists_name ON playlists(name)");
	}

	// BIBLE TRANSLATIONS/VERSES
	{
		db->exec("CREATE TABLE bible_translations ("
				 "translation_id TEXT PRIMARY KEY,"
				 "name TEXT NOT NULL"
				 ")");

		db->exec("CREATE TABLE bible_translation_books ("
				 "translation_id TEXT NOT NULL,"
				 "book_id INTEGER NOT NULL,"
				 "name TEXT NOT NULL,"
				 "max_chapter INTEGER NOT NULL"
				 ")");

		db->exec("CREATE TABLE bible_translation_verses ("
				"id INTEGER PRIMARY KEY,"
				"translation_id TEXT NOT NULL,"
				"book_id INTEGER NOT NULL,"
				"chapter INTEGER NOT NULL,"
				"verse INTEGER NOT NULL,"
				"text TEXT"
				")");

		db->exec("CREATE VIRTUAL TABLE bible_verses_fulltext USING fts4 ("
				 "text TEXT NOT NULL"
				 ")");

		db->exec("CREATE INDEX i_bible_translation_books ON bible_translation_books (translation_id,book_id)");
		db->exec("CREATE INDEX i_bible_translation_verses ON bible_translation_verses (translation_id,book_id,chapter,verse)");
	}
}

DB_MIGRATION_PROCEDURE(1, 2)
{
	db->exec("CREATE TABLE playlists_tmp ("
			 "id INTEGER PRIMARY KEY,"
			 "name STRING NOT NULL,"
			 "data BLOB,"
			 "lastTouch INTEGER NOT NULL"
				")");

	db->exec("CREATE INDEX i_playlists_name ON playlists(name)");

	db->exec("INSERT INTO playlists_tmp SELECT *, 0 AS lastTouch FROM playlists");
	db->exec("DROP TABLE playlists");
	db->exec("ALTER TABLE playlists_tmp RENAME TO playlists");
}

DB_MIGRATION_PROCEDURE(2, 3)
{
	db->exec("CREATE TABLE songs_tmp ("
			 "id INTEGER PRIMARY KEY,"
			 "uid TEXT NOT NULL,"
			 "name TEXT NOT NULL,"
			 "author TEXT NOT NULL,"
			 "copyright TEXT NOT NULL,"
			 "content TEXT NOT NULL,"
			 "notes TEXT NOT NULL,"
			 "slideOrder TEXT NOT NULL,"
			 "lastEdit INTEGER NOT NULL"
			 ")");

	db->exec("INSERT INTO songs_tmp SELECT id, uid, name, author, copyright, content, '' AS notes, slideOrder, lastEdit FROM songs");
	db->exec("DROP TABLE songs");
	db->exec("ALTER TABLE songs_tmp RENAME TO songs");

	db->exec("CREATE INDEX i_songs_uid ON songs (uid)");
	db->exec("CREATE INDEX i_songs_name ON songs (name)");
	db->exec("CREATE INDEX i_songs_author_name ON songs (author, name)");
}

DB_MIGRATION_PROCEDURE(3, 4)
{
	db->exec("UPDATE songs SET uid = CAST(uid AS TEXT)");

	db->beginTransaction();

	auto q = db->selectQuery("SELECT id FROM songs");
	while(q.next())
		db->updateSongFulltextIndex(q.value(0).toLongLong());

	db->commitTransaction();
}

DB_MIGRATION_PROCEDURE(4, 5)
{
	db->exec("CREATE TABLE bible_translations ("
			 "translation_id TEXT PRIMARY KEY,"
			 "name TEXT NOT NULL"
			 ")");

	db->exec("CREATE TABLE bible_translation_books ("
			 "translation_id TEXT NOT NULL,"
			 "book_id INTEGER NOT NULL,"
			 "name TEXT NOT NULL,"
			 "max_chapter INTEGER NOT NULL"
			 ")");

	db->exec("CREATE TABLE bible_translation_verses ("
			"id INTEGER PRIMARY KEY,"
			"translation_id TEXT NOT NULL,"
			"book_id INTEGER NOT NULL,"
			"chapter INTEGER NOT NULL,"
			"verse INTEGER NOT NULL,"
			"text TEXT"
			")");

	db->exec("CREATE VIRTUAL TABLE bible_verses_fulltext USING fts4 ("
			 "text TEXT NOT NULL"
			 ")");

	db->exec("CREATE INDEX i_bible_translation_books ON bible_translation_books (translation_id,book_id)");
	db->exec("CREATE INDEX i_bible_translation_verses ON bible_translation_verses (translation_id,book_id,chapter,verse)");
}
